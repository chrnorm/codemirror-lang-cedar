@top Program { policy* }

@precedence {
  entity @left,
  path @left,
  primary @left,
  unary @right,
  multiplicative @left,
  additive @left,
  comparative @left,
  and @left,
  or @left,
  unary_expression @left,
  call_expression @left,
  if_then_else @left,
  composite_literal @right,
  expression,
  literal @left,
  String @left
}

@tokens {
  identifierChar { @asciiLetter | $[_$\u{a1}-\u{10ffff}] }

  word { identifierChar (identifierChar | @digit)* }

  identifier { word }


  String { '"' (!["\\] | "\\" _)* '"' }
  Int { $[0-9]+ }

  whitespace { $[ \t\n\r]+ }
  LineComment[isolate] { "//" ![\n]* }

  "(" ")" "{" "}" "[" "]" "," ";" "::" "." "=="
}

@skip { whitespace | LineComment }

policy {
  Policy { annotation* effect "(" Scope { scope } ")" condition* ";" }
}

effect { kw<"permit"> | kw<"forbid"> }

scope {
  PrincipalConstraint { principal_constraint } "," ActionConstraint { action_constraint } "," ResourceConstraint { resource_constraint }
}

annotation { "@" identifier "(" String ")" }

principal_constraint {
  "principal" (principal_is | principal_eq | principal_in | principal_eq_template | principal_in_template)?
}

principal_is { kw<"is"> path }
principal_eq { CompareOp<"=="> entity }
principal_in { kw<"in"> entity }
principal_eq_template { CompareOp<"=="> "?principal" }
principal_in_template { kw<"in"> "?principal" }

action_constraint {
  "action" (action_eq | action_in | action_in_list)?
}

action_eq { CompareOp<"=="> entity }
action_in { kw<"in"> entity }
action_in_list { kw<"in"> entlist }

resource_constraint {
  "resource" (resource_is | resource_eq | resource_in | resource_eq_template | resource_in_template)?
}

resource_is { kw<"is"> path }
resource_eq { CompareOp<"=="> entity }
resource_in { kw<"in"> entity }
resource_eq_template { CompareOp<"=="> "?resource" }
resource_in_template { kw<"in"> "?resource" }

condition { (kw<"when"> | kw<"unless">) "{" expression "}" }

expression {
  literal |
  unary_expression |
  binary_expression |
  index_expression |
  parenthesized_expression |
  selector_expression |
  has_expression |
  is_expression |
  call_expression |
  like_expression |
  if_then_else |
  contains_expression |
  contains_all_expression |
  ext_fun_call |
  entity |
  entlist |
  set_literal |
  record_literal |
  Principal |
  Action |
  Resource |
  Context
}

boolean { @specialize[@name=BooleanLiteral]<identifier, "true" | "false"> }

literal { boolean | Int | String }

CompareOp<expr> { expr }
ArithOp<expr> { expr }
LogicOp<expr> { expr }

unary_expression { ("-" | "!") !expression }

binary_expression {
  expression !multiplicative ArithOp<"*"> expression |
  expression !additive (ArithOp<"+" | "-">) expression |
  expression !comparative (CompareOp<"<" | "<=" | ">=" | ">" | "!=" | "=="> | kw<"in">) expression |
  expression !and LogicOp<"&&"> expression |
  expression !or LogicOp<"||"> expression
}

index_expression { expression "[" expression "]" }
parenthesized_expression { "(" expression ")" }
selector_expression { expression "." identifier }
has_expression { expression kw<"has"> (String | identifier) }
is_expression { expression kw<"is"> path }
call_expression { expression "(" commaSep<expression> ")" }
like_expression { expression kw<"like"> String }
if_then_else { kw<"if"> !expression kw<"then"> !expression kw<"else"> !expression }
contains_expression { expression "." kw<"contains"> "(" expression ")" }
contains_all_expression { expression "." kw<"containsAll"> "(" expression ")" }
ext_fun_call { path "(" commaSep<expression> ")" }

Namespace { identifier "::" }

path { Namespace+ identifier }

entity { Namespace+ String }

entlist { "[" commaSep<entity> "]" }

set_literal { "[" commaSep<literal> "]" }

record_literal { "{" commaSep<record_attribute> "}" }

record_attribute { (String | identifier) ":" literal }

commaSep<rule> { rule ("," rule)* }

Principal { @specialize<identifier, "principal"> }
Action { @specialize<identifier, "action"> }
Resource { @specialize<identifier, "resource"> }
Context { @specialize<identifier, "context"> }

kw<term> { @specialize[@name={term}]<identifier, term> }
